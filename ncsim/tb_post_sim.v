// MAX TB Test Protocol File, generated by MAX TB Version F-2011.09-SP2
// Sat Mar  1 15:31:15 2014
// Module under test: Digital_Timer
// Generated from original STIL file : "tmax/tb.stil"
// STIL file version: "1.0"
// Simulation mode: default serial simulation

`define TDATA_FILE "/home/scf-14/linweidi/work/assignment/lab5/./tb/tb.dat"
`timescale 1ns/1ns

`include "/home/scf-22/ee577/design_pdk/osu_stdcells/lib/tsmc018/lib/osu018_stdcells.v"

`include "./Libraries/scan_lib.v"

// OPCODE DEFINITION
`define EndPat 0
`define IncPat 1
`define SetPat 2
`define WFTStmt 3
`define ConditionStmt 4
`define VectorStmt 5
`define FixedStmt 6
`define test_setupStmt 7
`define load_unloadStmt 8
`define multiclock_captureStmt 9
`define allclock_launchStmt 10
`define allclock_captureStmt 11

// SIGS DEFINITION
`define clk 0
`define rst 1
`define \ini_Time[3]  2
`define \ini_Time[2]  3
`define \ini_Time[1]  4
`define \ini_Time[0]  5
`define up_in 6
`define down_in 7
`define I_SCAN_MODE 8
`define I_SCAN_RST 9
`define I_SCAN_IN 10
`define I_SE 11
`define \Time[3]  12
`define \Time[2]  13
`define \Time[1]  14
`define \Time[0]  15
`define alarm 16
`define O_SCAN_OUT 17
`define _pi 18
`define all_inputs 19
`define _po 20
`define _si 21
`define all_outputs 22
`define _clk 23
`define _so 24

// WFTS DEFINITION
`define _multiclock_capture_WFT_ 0
`define _default_WFT_ 1
`define _allclock_launch_WFT_ 2
`define _allclock_capture_WFT_ 3
`define MAX_PART 0

`define MAXTB_HEADER " MAX TB Version F-2011.09-SP2\n Test Protocol File generated from original file \"tmax/tb.stil\"\n STIL file version: 1.0"
`define MAXTB_H_S "#############################################################################"


module /* maxtb */ Digital_Timer_test ();
   parameter NSTMTS = 12; // number of all stmts
   parameter DFSHIFTS = 0; // (default) number of serial shifts in parallel scan mode
   parameter NAMELENGTH = 200; // max length of names reported in fails
   parameter MAXCHLEN = 11, NCHAINS = 1; // MAXCHLEN for serial
   parameter NINPUTS = 12, NOUTPUTS = 6, CUM_WIDTH=58;
   parameter NSIS = 1, NSOUTS = 1;
   parameter WFT_IDS = 4, SIG_IDS = 25, SIG_IDS_W = 5, MAX_WIDTH = 12, MAX_SIGW = 1;
   parameter PARSERINC = 11; 
   parameter SYNC_LATENCY = 3; 
   parameter PRTIME = 0.000000; 
   integer xtb_sim_mode; // simulation modes: xtb_sim_mode=0 -> serial, xtb_sim_mode=1 -> parallel (default);
   integer nbfails, abit, cbit;
   integer prev_error; // flag for tracking displayed error banner
   integer loads;        // number of load_unloads for current pattern
   integer prev_pat;     // previous pattern number;
   integer rep_pat; // report pattern progress every Nth pattern
   integer verbose;      // message verbosity level
   integer data_i, n, cur_pat, start_pat, end_pat, last_pat, total_pats, csci, fsci, cur_stmt;
   integer v_count, v_count_per_pat;  // track the cycle count and cycle/pattern count (helpful for the simulator GUI)
   integer SSHIFTS;
   integer diagf, diagm;
   integer sertmg;
   integer the_wft_id, wft_id_s;
   integer ser_pats;
   integer first_pat;
   event start_part, end_part;

   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] ALLINSIGS, ALLOUTSIGS;
   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] TMPINSIGS_V,TMPINSIGS_T,TMPINSIGS_V_S,TMPINSIGS_T_S;
   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] TMPOUTSIGS_V,TMPOUTSIGS_T,TMPOUTSIGS_V_S,TMPOUTSIGS_T_S;
   reg [NINPUTS+NOUTPUTS-1:0] ALLINSIGIDS, ALLOUTSIGIDS, ALLINSIGIDS_S, ALLOUTSIGIDS_S;
   reg [NSTMTS-1:0] opcode, popcode;
   event force_scells;
   event strobe_scells;
   event release_scells;
   reg [28:0] memel, memall [1:701];
   reg [0:(8*NAMELENGTH)-1] CH_NAMES [0:NCHAINS-1];
   reg [0:(8*NAMELENGTH)-1] CH_PINS [0:NCHAINS-1];
   reg [0:MAXCHLEN-1] LOD, LOAD[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] UNL, UNLOAD[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] UNLM, UNLMSK[0:NCHAINS-1], SHBEGM[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] SERIALM;
   reg [0:MAXCHLEN-1] CH_INPINV[0:NCHAINS-1], CH_OUTINV[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] CT_OUTINV[0:NCHAINS-1];
   wire [0:NCHAINS-1] SCANOUT;
   reg [0:MAXCHLEN-1] CHOUT, CHAINOUT[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] CHAINOUT0;
   reg [0:MAXCHLEN-1] LOD0;
   reg [4:0] the_sids [0:SIG_IDS-1];
   reg [MAX_WIDTH-1:0] the_sigs [0:SIG_IDS-1];
   reg strobe_en;
   reg [SIG_IDS-1:0] sid_args ;
   reg [2*CUM_WIDTH-1:0] sval_args;
   reg [8*NAMELENGTH-1:0]  SignalIDName [0:24];
   reg [2:0]  SignalIDType [0:24];
   reg [3:0]  SignalIDWidth [0:24];
   reg [(8*NAMELENGTH-1):0]  WFTIDName [0:3];
   reg [0:(8*NAMELENGTH-1)] StmtNames [0:NSTMTS];
   reg [0:(8*NAMELENGTH-1)] diag_file;

   reg clk ;
   reg rst ;
   reg \ini_Time[3]  ;
   reg \ini_Time[2]  ;
   reg \ini_Time[1]  ;
   reg \ini_Time[0]  ;
   reg up_in ;
   reg down_in ;
   reg I_SCAN_MODE ;
   reg I_SCAN_RST ;
   reg I_SCAN_IN ;
   reg I_SE ;
   wire \Time[3]  ;
   wire \Time[2]  ;
   wire \Time[1]  ;
   wire \Time[0]  ;
   wire alarm ;
   wire O_SCAN_OUT ;

   wire [0:(8*NAMELENGTH-1)] cur_StmtName;
   assign cur_StmtName = StmtNames[cur_stmt] ;


   Digital_Timer dut( 
     .clk ( clk ),
     .rst ( rst ),
     .ini_Time ( { \ini_Time[3] ,
        \ini_Time[2] ,
        \ini_Time[1] ,
        \ini_Time[0] } ),
     .up_in ( up_in ),
     .down_in ( down_in ),
     .I_SCAN_MODE ( I_SCAN_MODE ),
     .I_SCAN_RST ( I_SCAN_RST ),
     .I_SCAN_IN ( I_SCAN_IN ),
     .I_SE ( I_SE ),
     .Time ( { \Time[3] ,
        \Time[2] ,
        \Time[1] ,
        \Time[0] } ),
     .alarm ( alarm ),
     .O_SCAN_OUT ( O_SCAN_OUT )
  );


   task save_context;
     begin
       wft_id_s = the_wft_id;
       TMPINSIGS_V_S = TMPINSIGS_V;
       TMPOUTSIGS_V_S = TMPOUTSIGS_V;
       TMPINSIGS_T_S = TMPINSIGS_T;
       TMPOUTSIGS_T_S = TMPOUTSIGS_T;
       ALLOUTSIGIDS_S = ALLOUTSIGIDS;
       ALLINSIGIDS_S = ALLINSIGIDS;
     end
   endtask 

   task restore_context;
     begin
       the_wft_id = wft_id_s;
       TMPINSIGS_V = TMPINSIGS_V_S;
       TMPOUTSIGS_V = TMPOUTSIGS_V_S;
       TMPINSIGS_T = TMPINSIGS_T_S;
       TMPOUTSIGS_T = TMPOUTSIGS_T_S;
       ALLOUTSIGIDS = ALLOUTSIGIDS_S;
       ALLINSIGIDS = ALLINSIGIDS_S;
     end
   endtask 

   task resolve_signal;
     input reg [4:0] sid;
   begin
     if (SignalIDType[sid] != 3) the_sids[0] = sid;
     else begin
       case (sid)
         'd18: begin // _pi
                 the_sids[11] = 10; the_sids[10] = 8; the_sids[9] = 9; the_sids[8] = 11; the_sids[7] = 0; the_sids[6] = 7; the_sids[5] = 5; the_sids[4] = 4; the_sids[3] = 3; the_sids[2] = 2; the_sids[1] = 1;
                 the_sids[0] = 6;
               end
         'd19: begin // all_inputs
                 the_sids[11] = 10; the_sids[10] = 8; the_sids[9] = 9; the_sids[8] = 11; the_sids[7] = 0; the_sids[6] = 7; the_sids[5] = 5; the_sids[4] = 4; the_sids[3] = 3; the_sids[2] = 2; the_sids[1] = 1;
                 the_sids[0] = 6;
               end
         'd20: begin // _po
                 the_sids[5] = 17; the_sids[4] = 15; the_sids[3] = 14; the_sids[2] = 13; the_sids[1] = 12;
                 the_sids[0] = 16;
               end
         'd21: begin // _si
                
                 the_sids[0] = 10;
               end
         'd22: begin // all_outputs
                 the_sids[5] = 17; the_sids[4] = 15; the_sids[3] = 14; the_sids[2] = 13; the_sids[1] = 12;
                 the_sids[0] = 16;
               end
         'd23: begin // _clk
                 the_sids[1] = 9;
                 the_sids[0] = 0;
               end
         'd24: begin // _so
                
                 the_sids[0] = 17;
               end
          default: begin $display("\nXTB Error: unrecognized signal id %d (valid range is 0..%d). Exiting...",sid, SIG_IDS); $finish; end
       endcase
     end
   end
   endtask

   task get_stb_sig;
     input reg [4:0] sid ;
     output reg [MAX_WIDTH-1:0] strsig;
   begin
     case (sid)
       'd12:	strsig[0:0] = 	\Time[3]  ;
       'd13:	strsig[0:0] = 	\Time[2]  ;
       'd14:	strsig[0:0] = 	\Time[1]  ;
       'd15:	strsig[0:0] = 	\Time[0]  ;
       'd16:	strsig[0:0] = 	alarm ;
       'd17:	strsig[0:0] = 	O_SCAN_OUT ;
       default: begin $display("\nXTB Error: unrecognized output signal id %d. Exiting...",sid); $finish; end
     endcase
   end
   endtask

   task set_force_sig;
     input reg [SIG_IDS-1:0] sid ;
   begin
     case (sid)
       'd0: clk 	= ALLINSIGS[sid];
       'd1: rst 	= ALLINSIGS[sid];
       'd2: \ini_Time[3]  	= ALLINSIGS[sid];
       'd3: \ini_Time[2]  	= ALLINSIGS[sid];
       'd4: \ini_Time[1]  	= ALLINSIGS[sid];
       'd5: \ini_Time[0]  	= ALLINSIGS[sid];
       'd6: up_in 	= ALLINSIGS[sid];
       'd7: down_in 	= ALLINSIGS[sid];
       'd8: I_SCAN_MODE 	= ALLINSIGS[sid];
       'd9: I_SCAN_RST 	= ALLINSIGS[sid];
       'd10: I_SCAN_IN 	= ALLINSIGS[sid];
       'd11: I_SE 	= ALLINSIGS[sid];
       default: begin $display("\nXTB Error: unrecognized (input) signal id %d (valid range is 0..%d). Exiting...",sid, SIG_IDS-1); $finish; end
     endcase
   end
   endtask 

   always  begin: force_sigs_p
     reg [SIG_IDS-1:0] sid; 
     reg [MAX_SIGW-1:0] sig;
     fork
        forever @(ALLINSIGS[0]) set_force_sig('d`clk );
        forever @(ALLINSIGS[1]) set_force_sig('d`rst );
        forever @(ALLINSIGS[2]) set_force_sig('d`\ini_Time[3]  );
        forever @(ALLINSIGS[3]) set_force_sig('d`\ini_Time[2]  );
        forever @(ALLINSIGS[4]) set_force_sig('d`\ini_Time[1]  );
        forever @(ALLINSIGS[5]) set_force_sig('d`\ini_Time[0]  );
        forever @(ALLINSIGS[6]) set_force_sig('d`up_in );
        forever @(ALLINSIGS[7]) set_force_sig('d`down_in );
        forever @(ALLINSIGS[8]) set_force_sig('d`I_SCAN_MODE );
        forever @(ALLINSIGS[9]) set_force_sig('d`I_SCAN_RST );
        forever @(ALLINSIGS[10]) set_force_sig('d`I_SCAN_IN );
        forever @(ALLINSIGS[11]) set_force_sig('d`I_SE );
     join
   end

   task measure_out_sig;
     input reg [SIG_IDS-1:0] sid ;
     input reg [MAX_WIDTH-1:0] xsig;
     input integer  stmtid;
     reg [MAX_WIDTH-1:0] csig;
     integer errshown, abit, cpat;
   begin
     errshown = 0;
     cpat = cur_pat < 0 ? 0 : cur_pat;
     get_stb_sig(sid,csig);
     for (abit = 0; abit < SignalIDWidth[sid]; abit = abit + 1) begin
       if (xsig[abit] !== 1'bx) begin
         if (xsig[abit] !== csig[abit]) begin
           if (errshown == 0) $display(">>>  Error during %0s pattern %0d", StmtNames[stmtid], cpat);
           if (SignalIDWidth[sid] <= 1) begin 
             $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, signal %0s", $time, v_count, xsig[abit], csig[abit], SignalIDName[sid]);
             if (diagf) begin 
               if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b)", SignalIDName[sid], v_count, xsig[abit], csig[abit]);
               else $fdisplay(diagf, "  %0d %0s (exp=%b, got=%b)", cpat, SignalIDName[sid], xsig[abit], csig[abit]);
             end 
           end 
           else begin 
             $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, signal %0s[%0d]", $time, v_count, xsig[abit], csig[abit], SignalIDName[sid], abit);
             if (diagf) begin 
               if (diagm==2) $fdisplay(diagf, "  C %0s[%0d] %0d (exp=%b, got=%b)", SignalIDName[sid], abit, v_count, xsig[abit], csig[abit]);
               else $fdisplay(diagf, "  %0d %0s[%d] (exp=%b, got=%b)", cpat, SignalIDName[sid], abit, xsig[abit], csig[abit]);
             end 
           end 
           nbfails = nbfails + 1;
           errshown = 1;
         end 
       end 
     end 
   end 
   endtask

   task measure_scan_out;
     input reg [SIG_IDS-1:0] sid ;
     input reg [MAX_WIDTH-1:0] xsig;
     input integer  chain;
     reg [MAX_WIDTH-1:0] csig;
     integer errshown, patoff;
   begin
     errshown = 0;
     get_stb_sig(sid, csig);
     if ((xsig[0] !==1'bx) && (xsig[0] !== csig[0])) begin
       patoff = (loads > 1 || cur_pat <= 0) ? 0 : 1;
       if (prev_error != cur_pat) begin
         if (cur_pat <= 0 || cur_pat == last_pat && loads > 1) begin
           $display(">>>  Error during scan pattern %0d %s", (cur_pat < 0) ? 0 : cur_pat,  (cur_pat == last_pat) ? "(detected from final pattern unload)" : "");
         end
         else begin
           if (loads > 1) $display(">>>  Error during scan pattern %0d (detected from %0d load/unload)", cur_pat, loads);
           else begin $display(">>>  Error during scan pattern %0d (detected from unload of pattern %0d)", cur_pat, cur_pat-1); end
         end 
         prev_error = cur_pat;
       end
       $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, chain %0s, pin %0s, scan cell %0d", $time, v_count, xsig[0], csig[0], CH_NAMES[chain], SignalIDName[sid], fsci);
       if (diagf) begin 
         if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b)", SignalIDName[sid], v_count, xsig[0], csig[0]);
          else $fdisplay(diagf, "  %0d %0s %0d (exp=%b, got=%b)", cur_pat-patoff, SignalIDName[sid], fsci, xsig[0], csig[0]);
       end 
       nbfails = nbfails + 1;
     end
   end 
   endtask

   always begin: measure_sigs_p
    fork
     forever @(ALLOUTSIGS['d`\Time[3] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_captureStmt ) measure_out_sig('d`\Time[3] ,ALLOUTSIGS[12], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\Time[2] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_captureStmt ) measure_out_sig('d`\Time[2] ,ALLOUTSIGS[13], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\Time[1] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_captureStmt ) measure_out_sig('d`\Time[1] ,ALLOUTSIGS[14], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\Time[0] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_captureStmt ) measure_out_sig('d`\Time[0] ,ALLOUTSIGS[15], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`alarm]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_captureStmt ) measure_out_sig('d`alarm,ALLOUTSIGS[16], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`O_SCAN_OUT]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `load_unloadStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_captureStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`O_SCAN_OUT,ALLOUTSIGS[17], 0); 
       else measure_out_sig('d`O_SCAN_OUT,ALLOUTSIGS[17], cur_stmt); 
     end
    join
   end 

   task undef_wfc;
     input reg [1:0] wfc;
     input reg [4:0] sid;
     input integer wftid;
   begin
     $display("XTB Error: unrecognized %s value (WFC):%0b, on signal %0s for WFT %0s. Exiting...", wfc[1]?"strobe":"force", wfc[0], SignalIDName[sid], WFTIDName[wftid]);
     $finish;
   end
   endtask

   task apply__multiclock_capture_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd10, 'd8, 'd11, 'd7, 'd5, 'd4, 'd3, 'd2, 'd1, 'd6: // I_SCAN_IN, I_SCAN_MODE, I_SE, down_in, \ini_Time[0] , \ini_Time[1] , \ini_Time[2] , \ini_Time[3] , rst, up_in
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd17, 'd15, 'd14, 'd13, 'd12, 'd16: // O_SCAN_OUT, \Time[0] , \Time[1] , \Time[2] , \Time[3] , alarm
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bX;   end
                 2'b11: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b1;   end
                 2'b10: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b0;   end
                 2'b1Z: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd0: // clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd9: // I_SCAN_RST
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task apply__default_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd10, 'd8, 'd11, 'd7, 'd5, 'd4, 'd3, 'd2, 'd1, 'd6: // I_SCAN_IN, I_SCAN_MODE, I_SE, down_in, \ini_Time[0] , \ini_Time[1] , \ini_Time[2] , \ini_Time[3] , rst, up_in
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd17, 'd15, 'd14, 'd13, 'd12, 'd16: // O_SCAN_OUT, \Time[0] , \Time[1] , \Time[2] , \Time[3] , alarm
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bX;   end
                 2'b11: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b1;   end
                 2'b10: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b0;   end
                 2'b1Z: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd9: // I_SCAN_RST
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd0: // clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task apply__allclock_launch_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd10, 'd8, 'd11, 'd7, 'd5, 'd4, 'd3, 'd2, 'd1, 'd6: // I_SCAN_IN, I_SCAN_MODE, I_SE, down_in, \ini_Time[0] , \ini_Time[1] , \ini_Time[2] , \ini_Time[3] , rst, up_in
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 2);
               endcase
             end
           end
         end 
         'd17, 'd15, 'd14, 'd13, 'd12, 'd16: // O_SCAN_OUT, \Time[0] , \Time[1] , \Time[2] , \Time[3] , alarm
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bX;   end
                 2'b11: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b1;   end
                 2'b10: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b0;   end
                 2'b1Z: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 2);
               endcase
             end
           end
         end 
         'd0: // clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 2);
               endcase
             end
           end
         end 
         'd9: // I_SCAN_RST
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 2);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task apply__allclock_capture_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd10, 'd8, 'd11, 'd7, 'd5, 'd4, 'd3, 'd2, 'd1, 'd6: // I_SCAN_IN, I_SCAN_MODE, I_SE, down_in, \ini_Time[0] , \ini_Time[1] , \ini_Time[2] , \ini_Time[3] , rst, up_in
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 3);
               endcase
             end
           end
         end 
         'd17, 'd15, 'd14, 'd13, 'd12, 'd16: // O_SCAN_OUT, \Time[0] , \Time[1] , \Time[2] , \Time[3] , alarm
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bX;   end
                 2'b11: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b1;   end
                 2'b10: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b0;   end
                 2'b1Z: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 3);
               endcase
             end
           end
         end 
         'd0: // clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 3);
               endcase
             end
           end
         end 
         'd9: // I_SCAN_RST
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 3);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task resolve_wft;
     input integer wftid ;
   begin
     if (wftid > WFT_IDS || wftid <0) begin 
       $display("\nXTB Error: undefined WFT id %0d (valid range is 0..%0d). Exiting...",wftid, WFT_IDS);
       $finish;
     end
     the_wft_id = wftid;
   end
   endtask

   task apply_wft; 
     input integer wftid ;
   begin
     case (wftid) 
       'd0: apply__multiclock_capture_WFT_WFT;
       'd1: apply__default_WFT_WFT;
       'd2: apply__allclock_launch_WFT_WFT;
       'd3: apply__allclock_capture_WFT_WFT;
       default:begin $display("\nXTB Error: undefined WFT id %d. Exiting...",wftid); $finish; end
     endcase
   end
   endtask 

   task  complete_cycle;
     input integer wft_id ;
   begin
     case(wft_id)
       'd0: #(100); // _multiclock_capture_WFT_
       'd1: #(100); // _default_WFT_
       'd2: #(100); // _allclock_launch_WFT_
       'd3: #(100); // _allclock_capture_WFT_
     endcase
   end
   endtask

   task set_args;
     input reg [4:0] nargs;
     integer i, na;
     reg [2*CUM_WIDTH-1:0] sidx;
     reg [SIG_IDS_W-1:0] sid; 
   begin
     na = 0; sid_args = 'b0; sval_args = 'b0;
     while (na < nargs) begin
       data_i = data_i + 1;
       memel = memall[data_i];
       sid = memel[SIG_IDS_W-1:0];
       if (sid > SIG_IDS-1) begin
         $display($time, "\nXTB Error: Passing wrong signal ID (%0b), valid range is 1..%0d. Exiting...", sid, SIG_IDS-1);
         $finish; 
       end
       sid_args[sid] = 1'b1;
       sidx = sig_idx(sid);
       for (i = 0; i < 2*SignalIDWidth[sid]; i = i + 1)
         sval_args[sidx+i] = memel[i+SIG_IDS_W];
       na=na+1; 
    end  
  end 
  endtask

   function [2*CUM_WIDTH-1:0] sig_idx;
     input reg [SIG_IDS_W-1:0] sid;
     integer i; 
   begin
     sig_idx = 0;
     for (i = 0; i < sid; i = i + 1) sig_idx = sig_idx+2*SignalIDWidth[i];
   end 
   endfunction

   task  assign_ival;
     input reg [SIG_IDS_W-1:0] sid;
     reg [2*CUM_WIDTH-1:0] sidx;
     reg [2*MAX_WIDTH-1:0] sval;
     integer i;
   begin 
     sidx = sig_idx(sid);
     for (i = 0; i<2*SignalIDWidth[sid]; i = i + 1) sval[i] = sval_args[sidx+i];
     assign_val(sid , sval);
   end 
   endtask

   task  assign_val;
     input reg [SIG_IDS_W-1:0] sid;
     input reg [2*MAX_WIDTH-1:0] sval;
     reg [MAX_WIDTH-1:0] nb; 
     reg [6:0] idx;
     reg [4:0] n, ns;
   begin
     if (sid > SIG_IDS-1 || sid < 0) begin
       $display("\nXTB Error: Passing wrong signal ID (%d), valid range is 1..%0d. Exiting...", sid, SIG_IDS-1);
       $finish;
     end
     resolve_signal(sid);
     idx = 0; 
     ns = (SignalIDType[sid]==3) ? SignalIDWidth[sid] : 1;
     for (n = 0; n < ns; n = n + 1)
     begin
       if (sval[idx+SignalIDWidth[sid]] === 1'b1) begin
         for (nb = 0; nb < SignalIDWidth[the_sids[n]]; nb = nb + 1) begin
           TMPOUTSIGS_V[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb];
           TMPOUTSIGS_T[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb+SignalIDWidth[sid]];
           ALLOUTSIGIDS[the_sids[n]] = 1'b1; 
           if (sval[idx+nb] != 1'bx)
             ALLINSIGIDS[the_sids[n]] = 1'b0;
         end
       end
       else begin
         for (nb = 0; nb < SignalIDWidth[the_sids[n]]; nb = nb + 1) begin
           TMPINSIGS_V[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb];
           TMPINSIGS_T[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb+SignalIDWidth[sid]];
           ALLINSIGIDS[the_sids[n]] = 1'b1;
           ALLOUTSIGIDS[the_sids[n]] = 1'b0;
       end 
     end
     idx = idx+SignalIDWidth[the_sids[n]];
     end 
   end 
   endtask

   task  check_sid_args;
     input reg [(NAMELENGTH-1):0] tname;
     input reg [SIG_IDS-1:0] vargs ;
     input reg [SIG_IDS-1:0] cargs ;
     integer i;
   begin
     for (i = 0; i < SIG_IDS-1; i = i + 1)
       if (cargs[i] === 1'b1 && vargs[i] !== 1'b1) begin
         $display("\nXTB Error: Passing wrong signal argument (%s), to Macro/Procedure %s. Exiting...", SignalIDName[i], tname); 
         $finish;
       end 
   end 
   endtask

   task  assign_stmt;
     input integer wftid ;
   begin
     v_count = v_count+1;
     v_count_per_pat = v_count_per_pat+1;
     if (verbose >= 4) $display("XTB: Starting V# %0d at time %0t", v_count, $time);
     apply_wft(wftid);
     complete_cycle(wftid);
   end
   endtask

   task display_stmt;
     input integer stmtid;
   begin
     $display("XTB: Processed statement: %0s", StmtNames[stmtid]);
   end
   endtask

   task measure_chain_out;
     input reg [NCHAINS-1:0] chid;
     integer bi, errshown, patoff, prefo;
     integer tsc;
     reg [0:MAXCHLEN-1]  UNLM;
   begin
     tsc = 0;
     prefo = 0;
     UNLM = ~('b0);
     CHAINOUT[0] = (CHAINOUT0);
     UNL = UNLOAD[chid] << prefo;
     CHOUT = CHAINOUT[chid] ^ CH_OUTINV[chid] ^ CT_OUTINV[chid];

     for (bi = 0; bi < MAXCHLEN; bi = bi + 1)
       if (UNL[bi] === 1'bx)  UNLM[bi] = 1'b0;

     for (bi = 0; bi < prefo; bi = bi + 1) UNLM[MAXCHLEN-1-bi] = 1'b0;

     if ((UNL&UNLM) !== (CHOUT&UNLM)) begin
       patoff = (loads > 1 || cur_pat <= 0) ? 0 : 1;
     if (cur_pat <= 0 || cur_pat == last_pat && loads > 1) begin
       $display(">>>  Error during scan pattern %0d %s", (cur_pat<0)?0:cur_pat, (cur_pat==last_pat)?"(detected from final parallel pattern unload)":"");
     end
     else begin
       if (loads > 1) $display(">>>  Error during scan pattern %0d (detected from %0d parallel load/unload)", cur_pat, loads);
       else begin $display(">>>  Error during scan pattern %0d (detected from parallel unload of pattern %0d)", cur_pat, cur_pat-1); end
     end
       for (bi = 0; bi < MAXCHLEN-prefo; bi=bi + 1) begin
         if ((UNL[bi] !== 1'bx) && (UNL[bi] !== CHOUT[bi])) begin
           $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, chain %0s, pin %0s, scan cell %0d", $time, sertmg?v_count+1+bi+prefo:v_count, UNL[bi], CHOUT[bi], CH_NAMES[chid], CH_PINS[chid], bi+prefo+tsc);
           if (diagf) begin 
           if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b) ", CH_PINS[chid], v_count, UNL[bi], CHOUT[bi]);
           else $fdisplay(diagf, "  %0d %0s %0d (exp=%b, got=%b)",
               cur_pat-patoff, CH_NAMES[chid], bi+prefo+tsc, UNL[bi], CHOUT[bi]);
           end 
           nbfails = nbfails + 1;
          end 
       end  
     end  
   end
   endtask

   task test_setup;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     if (verbose >= 2) $display("XTB: Starting macro test_setup..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("test_setup",25'b1, idargs);
     resolve_wft(1);

     assign_val('d`all_inputs , 24'b000000000000XXXXXXXXXXXX);
     assign_val('d`all_outputs , 12'b111111XXXXXX);

     assign_val('d`I_SCAN_MODE , 2'b01);
     assign_val('d`I_SCAN_RST , 2'b00);
     assign_val('d`clk , 2'b00);
     assign_stmt(the_wft_id);

     assign_stmt(the_wft_id);

   end 
   endtask

   task shift_0;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
     input integer stsci;
     input reg stroben;
   begin
    csci = stsci+0; prev_error = -2;
    while (csci < 11) begin
     fsci = csci;
     if (verbose >= 2) $display("XTB: shift %0d, at %0t ", csci, $time);
     resolve_wft(1);
     assign_val('d`_clk , 4'b0Z01);
         if (idargs[21] === 1'b1 || idargs[10] === 1'b1) begin 
           LOD=LOAD[0]; assign_val('d`I_SCAN_IN , {1'b0, LOD[csci+0]});
         end
         if (stroben && (idargs[24] === 1'b1 || idargs[17] === 1'b1)) begin 
           UNL = UNLOAD[0]; assign_val('d`O_SCAN_OUT , {1'b1,  UNL[csci+0]});
         end
     assign_stmt(the_wft_id);
     csci = csci+1;
    end
   end
   endtask

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT0 = { dut.Time_reg_3_.Q , dut.up_reg.Q , dut.state_reg_5_.QN , dut.state_reg_4_.QN , dut.state_reg_3_.QN , dut.state_reg_2_.QN , dut.state_reg_1_.QN , dut.down_reg.Q , dut.Time_reg_2_.Q , dut.Time_reg_1_.Q 
		, dut.Time_reg_0_.Q  };
   end

   `define CELL0IN0 dut.Time_reg_0_.SI
   `define CHAININ0 {dut.Time_reg_3_.SI , dut.up_reg.SI , dut.state_reg_5_.SI , dut.state_reg_4_.SI , dut.state_reg_3_.SI , dut.state_reg_2_.SI , dut.state_reg_1_.SI , dut.down_reg.SI , dut.Time_reg_2_.SI , dut.Time_reg_1_.SI , `CELL0IN0 }


   task p_shift_0;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
     integer i;
   begin
     if (~(idargs[21] | idargs[10] | idargs[24] | idargs[17] )) 
       disable p_shift_0; 
     if (SSHIFTS < MAXCHLEN) begin
         if (verbose >= 2) $display("XTB: (parallel) shift, at %0t  ", $time);
         resolve_wft(1);
     fork 
       begin: b1 
         #40 ;
         -> strobe_scells;
         repeat (SYNC_LATENCY) #0;
         if (idargs[24] === 1'b1 ||  idargs[17] === 1'b1) begin 
           measure_chain_out('d0);
         end
         if (idargs[21] === 1'b1 ||  idargs[10] === 1'b1) begin 
           LOD0=(LOAD[0] >> SSHIFTS) ^ CH_INPINV[0];
         end

           ->force_scells; 
         #0;
       end 
       begin: b2 
         assign_val('d`_clk , 4'b0Z01);
         assign_stmt(the_wft_id);

       end 
     join 

     ->release_scells; 

         if (sertmg == 1) begin
           v_count = v_count + PARSERINC - SSHIFTS - 1;
           for (i = 0; i < PARSERINC - SSHIFTS - 1; i = i+1) 
             complete_cycle(the_wft_id);
         end
         if (SSHIFTS > 0) shift_0(idargs, valargs, MAXCHLEN-SSHIFTS, 0) ; 

     end 
     else begin 
         shift_0(idargs, valargs, 0, 1);
     end
   end
   endtask


   always /* ParallelShiftMode */ @(force_scells) begin 
           force `CHAININ0 = LOD0;

   end


   always /* ParallelShiftMode */ @(release_scells) begin 
     release `CHAININ0; 
   end

   task load_unload;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     if (verbose >= 2) $display("XTB: Starting proc load_unload..., T=%0t, V=%0d", $time, v_count+1);

     if (xtb_sim_mode == 0 && ser_pats > 0 && cur_pat == (ser_pats+first_pat)) begin
       $display("XTB: Switching into Parallel simulation mode at pattern %0d (using %0d serial shifts)", cur_pat, SSHIFTS);
       xtb_sim_mode = 1; 
     end
     if (cur_pat != prev_pat) begin
       loads = 1;
       prev_pat = cur_pat;
       if (cur_pat % rep_pat == 0)
         $display("XTB: Begin %0s scan load for pattern %0d (T=%0t, V=%0d)", xtb_sim_mode?"parallel":"serial", cur_pat, $time, v_count+1);
     end
     else begin
       loads = loads + 1;
       if (cur_pat % rep_pat == 0)
         $display("XTB: Begin %0s scan load for pattern %0d, unload %0d (T=%0t, V=%0d)", xtb_sim_mode?"parallel":"serial", cur_pat, loads, $time, v_count+1);
     end
     save_context;
     resolve_wft(1);

     assign_val('d`all_inputs , 24'b000000000000X10X0XXXXXXX);
     assign_val('d`all_outputs , 12'b111111XXXXXX);

     assign_val('d`I_SE , 2'b01);
     assign_stmt(the_wft_id);

     if (xtb_sim_mode)      p_shift_0(idargs, valargs);
     else      shift_0(idargs, valargs, 0, 1);

     restore_context;
   end 
   endtask

   task multiclock_capture;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     if (verbose >= 2) $display("XTB: Starting proc multiclock_capture..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("multiclock_capture",25'b1, idargs);
     save_context;
     resolve_wft(0);

     assign_val('d`all_inputs , 24'b000000000000X10X0XXXXXXX);
     assign_val('d`all_outputs , 12'b111111XXXXXX);

     assign_val('d`I_SCAN_MODE , 2'b01);

     if (idargs[18] === 1'b1) assign_ival('d`_pi );
     if (idargs[10] === 1'b1) assign_ival('d`I_SCAN_IN );
     if (idargs[8] === 1'b1) assign_ival('d`I_SCAN_MODE );
     if (idargs[9] === 1'b1) assign_ival('d`I_SCAN_RST );
     if (idargs[11] === 1'b1) assign_ival('d`I_SE );
     if (idargs[0] === 1'b1) assign_ival('d`clk );
     if (idargs[7] === 1'b1) assign_ival('d`down_in );
     if (idargs[5] === 1'b1) assign_ival('d`\ini_Time[0]  );
     if (idargs[4] === 1'b1) assign_ival('d`\ini_Time[1]  );
     if (idargs[3] === 1'b1) assign_ival('d`\ini_Time[2]  );
     if (idargs[2] === 1'b1) assign_ival('d`\ini_Time[3]  );
     if (idargs[1] === 1'b1) assign_ival('d`rst );
     if (idargs[6] === 1'b1) assign_ival('d`up_in );
     if (idargs[20] === 1'b1) assign_ival('d`_po );
     if (idargs[17] === 1'b1) assign_ival('d`O_SCAN_OUT );
     if (idargs[15] === 1'b1) assign_ival('d`\Time[0]  );
     if (idargs[14] === 1'b1) assign_ival('d`\Time[1]  );
     if (idargs[13] === 1'b1) assign_ival('d`\Time[2]  );
     if (idargs[12] === 1'b1) assign_ival('d`\Time[3]  );
     if (idargs[16] === 1'b1) assign_ival('d`alarm );
     assign_stmt(the_wft_id);

     restore_context;
   end 
   endtask

   task allclock_launch;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     if (verbose >= 2) $display("XTB: Starting proc allclock_launch..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("allclock_launch",25'b1, idargs);
     save_context;
     resolve_wft(2);

     assign_val('d`all_inputs , 24'b000000000000X10X0XXXXXXX);
     assign_val('d`all_outputs , 12'b111111XXXXXX);

     assign_val('d`I_SCAN_MODE , 2'b01);

     if (idargs[18] === 1'b1) assign_ival('d`_pi );
     if (idargs[10] === 1'b1) assign_ival('d`I_SCAN_IN );
     if (idargs[8] === 1'b1) assign_ival('d`I_SCAN_MODE );
     if (idargs[9] === 1'b1) assign_ival('d`I_SCAN_RST );
     if (idargs[11] === 1'b1) assign_ival('d`I_SE );
     if (idargs[0] === 1'b1) assign_ival('d`clk );
     if (idargs[7] === 1'b1) assign_ival('d`down_in );
     if (idargs[5] === 1'b1) assign_ival('d`\ini_Time[0]  );
     if (idargs[4] === 1'b1) assign_ival('d`\ini_Time[1]  );
     if (idargs[3] === 1'b1) assign_ival('d`\ini_Time[2]  );
     if (idargs[2] === 1'b1) assign_ival('d`\ini_Time[3]  );
     if (idargs[1] === 1'b1) assign_ival('d`rst );
     if (idargs[6] === 1'b1) assign_ival('d`up_in );
     if (idargs[20] === 1'b1) assign_ival('d`_po );
     if (idargs[17] === 1'b1) assign_ival('d`O_SCAN_OUT );
     if (idargs[15] === 1'b1) assign_ival('d`\Time[0]  );
     if (idargs[14] === 1'b1) assign_ival('d`\Time[1]  );
     if (idargs[13] === 1'b1) assign_ival('d`\Time[2]  );
     if (idargs[12] === 1'b1) assign_ival('d`\Time[3]  );
     if (idargs[16] === 1'b1) assign_ival('d`alarm );
     assign_stmt(the_wft_id);

     restore_context;
   end 
   endtask

   task allclock_capture;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     if (verbose >= 2) $display("XTB: Starting proc allclock_capture..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("allclock_capture",25'b1, idargs);
     save_context;
     resolve_wft(3);

     assign_val('d`all_inputs , 24'b000000000000X10X0XXXXXXX);
     assign_val('d`all_outputs , 12'b111111XXXXXX);

     assign_val('d`I_SCAN_MODE , 2'b01);

     if (idargs[18] === 1'b1) assign_ival('d`_pi );
     if (idargs[10] === 1'b1) assign_ival('d`I_SCAN_IN );
     if (idargs[8] === 1'b1) assign_ival('d`I_SCAN_MODE );
     if (idargs[9] === 1'b1) assign_ival('d`I_SCAN_RST );
     if (idargs[11] === 1'b1) assign_ival('d`I_SE );
     if (idargs[0] === 1'b1) assign_ival('d`clk );
     if (idargs[7] === 1'b1) assign_ival('d`down_in );
     if (idargs[5] === 1'b1) assign_ival('d`\ini_Time[0]  );
     if (idargs[4] === 1'b1) assign_ival('d`\ini_Time[1]  );
     if (idargs[3] === 1'b1) assign_ival('d`\ini_Time[2]  );
     if (idargs[2] === 1'b1) assign_ival('d`\ini_Time[3]  );
     if (idargs[1] === 1'b1) assign_ival('d`rst );
     if (idargs[6] === 1'b1) assign_ival('d`up_in );
     if (idargs[20] === 1'b1) assign_ival('d`_po );
     if (idargs[17] === 1'b1) assign_ival('d`O_SCAN_OUT );
     if (idargs[15] === 1'b1) assign_ival('d`\Time[0]  );
     if (idargs[14] === 1'b1) assign_ival('d`\Time[1]  );
     if (idargs[13] === 1'b1) assign_ival('d`\Time[2]  );
     if (idargs[12] === 1'b1) assign_ival('d`\Time[3]  );
     if (idargs[16] === 1'b1) assign_ival('d`alarm );
     assign_stmt(the_wft_id);

     restore_context;
   end 
   endtask


   always @(start_part) begin: _burst__pattern__proc_unit

     integer nbpats, i;
     reg [4:0] nargs, na;
     reg [4:0] args;

     integer tdf;
     nbpats = 0; cur_pat = -1;
     end_pat = 0; v_count = 0; v_count_per_pat = 0;
     nbfails = 0;
     prev_pat = -2; prev_error = -2; first_pat = 0;
     diagf = 0;
     if (verbose >= 1) $display("XTB: Reading test data file \"%s\" ",`TDATA_FILE);


     tdf = $fopen(`TDATA_FILE, "r");
     if (!tdf) begin 	           
       $display("XTB Error: cannot open %0s file. Exiting...\n", `TDATA_FILE); 	           
       $finish;                    
     end 
     $fclose(tdf);  

     $readmemb(`TDATA_FILE, memall);

     data_i = 1; 
     popcode = 'd0;

     if (diagm > 0) begin
       if (diagm > 2) begin
         $display("XTB Warning: wrong diagnosis mode (%0d), using default mode 1 (pattern based)", diagm);
         diagm = 1 ; 
       end  
       `ifdef tmax_diag_file 
         diag_file = `tmax_diag_file;
       `else 
         diag_file = "./tb/tb.diag"; 
       `endif
       diagf = $fopen(diag_file);
       if (diagf == 0) begin
         $display("XTB Error: Unable to open diagnosis file %s (for writing). Exiting...", diag_file);
         $finish; 
       end
       if (verbose >= 1) $display("XTB: User requesting TetraMAX compliant diagnosis file: %0s", diag_file);
       $fdisplay(diagf, "// Serial scan error:       <pat#> \t<pin_name> \t<shift_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// USF Parallel scan error: <pat#> \t<pin_name> \t<shift_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// DSF Parallel scan error: <pat#> \t<chain_name> \t<cell_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// Capture error:           <pat#> \t<pin_name> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// Cycle based error:          C \t<pin_name> \t<vect_nbr> \t(<expected_value> <simulated_value>)\n\n");

     end 

     memel = memall[data_i]; 
     total_pats = memel[28:0];
     data_i=data_i+1;

     last_pat = -1;

     if (total_pats < 0 || |(total_pats) === 1'bx) begin
       $display("XTB Error: Inconsistent total number of patterns (%d). Exiting...",  total_pats);
       $finish;
     end

     if (verbose >= 1) $display("XTB: Total number of patterns  %0d",  total_pats); 
     if (last_pat == -1) last_pat = total_pats - 1;

     if (last_pat >= total_pats) begin
     $display("XTB Error: Patterns simulation (%0d) exceeds total pattern count (%0d). Exiting...",  last_pat+1,total_pats);
     $finish;
     end

     `ifdef tmax_n_pattern_sim
     last_pat=`tmax_n_pattern_sim;
     if (verbose >= 2) $display("XTB: User requesting simulating patterns 0 to %0d",last_pat);
     if (last_pat < 0)  begin 
     $display("XTB Error: User requesting simulating wrong number of patterns (%d). Exiting... ",last_pat);
     $finish;
     end
     `endif

     xtb_sim_mode = 0;
     SSHIFTS = DFSHIFTS;

     ser_pats = last_pat + 1;

     `ifdef tmax_serial
       xtb_sim_mode = 0; 
       if (~(`tmax_serial & 1'b1) == 1'b0) 
         ser_pats = last_pat + 1;
       else 
         ser_pats = `tmax_serial + 0;
       `ifdef tmax_parallel 
         SSHIFTS = `tmax_parallel + 0; 
         if (ser_pats  >= last_pat + 1) begin	 
           $display("XTB Warning: requesting full serial simulation and full parallel simulation in the same time. Performing the default serial simulation mode...");
           xtb_sim_mode = 0;
         end 
       `endif
       if (ser_pats < last_pat + 1)
         xtb_sim_mode = ser_pats > 0 ? 0 : 1;
     `else 
       `ifdef tmax_parallel
         xtb_sim_mode = 1;
         SSHIFTS = `tmax_parallel + 0; 
       `endif 
     `endif
     if (SSHIFTS < 0) begin
       $display("XTB Error: Passing negative value (%0d) of serial shifts in parallel mode. Exiting...",  SSHIFTS);
       $finish; 
     end

     `ifdef tmax_serial_timing 
       sertmg = 1;
       if (xtb_sim_mode == 1) $display("XTB: Parallel simulation (timing and vector) extended to match serial simulation");
       `else 
     sertmg = 0; 
     `endif


     $display("XTB: Starting %0s simulation of %0d patterns", xtb_sim_mode == 0 ? "serial" : "parallel", xtb_sim_mode == 0 ? ((ser_pats>last_pat || ser_pats==0)?(last_pat+1):ser_pats): last_pat + 1);
     if (xtb_sim_mode) $display("XTB: Using %0d serial shifts", SSHIFTS);

     if (SSHIFTS >= MAXCHLEN)  begin 
       $display("XTB Warning: serial shifts (%0d) equals or exceeds max chain length (%0d). Performing full serial scan... ", SSHIFTS, MAXCHLEN); 
       xtb_sim_mode = 0;	
     end 

     if (diagm==2 && xtb_sim_mode==1)  begin 
       $display("XTB Warning: cannot display cycle-based diagnostic messages in parallel load mode simulation. Simulation will display pattern-based diagnostic messages."); 
       diagm = 1;	
     end 

     while (cur_pat <= last_pat && end_pat != 1) begin
       memel = memall[data_i];
       opcode = memel[3:0];
       cur_stmt = -1;
       args = 'b0;
       case (opcode)
         'd`EndPat:  begin cur_stmt = `EndPat;  end_pat = 1; end
         'd`IncPat:  begin cur_stmt = `IncPat;  cur_pat = cur_pat + 1; v_count_per_pat = 0; nbpats = nbpats+1; end
         'd`SetPat:  begin
                       cur_stmt = `SetPat;
                       if (cur_pat==-1) begin first_pat=memel[27:4]; cur_pat = first_pat; end
                       else cur_pat = memel[27:4];
                       v_count_per_pat = 0;
                       last_pat = last_pat + cur_pat; nbpats = nbpats+1;  
                     end
         'd`WFTStmt: begin 
                       cur_stmt = `WFTStmt; resolve_wft(memel[6:4]); 
                     end 
         'd`ConditionStmt, 'd`FixedStmt, 'd`VectorStmt: begin
           if (opcode == 'd`ConditionStmt) cur_stmt = 'd`ConditionStmt;
           else 	cur_stmt='d`VectorStmt;
           nargs = memel[8:4];
           na = 0;
           while (na<nargs) begin
             data_i = data_i + 1;
             memel = memall[data_i];
             assign_val(memel[SIG_IDS_W-1:0], memel[2*MAX_WIDTH+SIG_IDS_W-1:SIG_IDS_W]);
             na = na + 1;
           end
           if (opcode == `VectorStmt) assign_stmt(the_wft_id);
          end 
         'd`test_setupStmt: begin: test_setup_BLOCK
           cur_stmt = `test_setupStmt;
           set_args(memel[8:4]);
           test_setup(sid_args, sval_args);
         end 
         'd`load_unloadStmt: begin: load_unload_BLOCK
           cur_stmt = `load_unloadStmt;
            na = 0; nargs = 'b0; sid_args = 'b0; sval_args = 'b0;
            nargs = memel[8:4];
            while (na < nargs) begin
              data_i = data_i + 1;
              memel = memall[data_i];
              if (memel[SIG_IDS_W-1:0] > SIG_IDS-1) begin
                $display("\nXTB Error: Passing wrong signal ID (%b), valid range is 1..%d. Exiting...", memel[SIG_IDS_W-1:0], SIG_IDS-1);
                $finish;
              end
              sid_args[memel[SIG_IDS_W-1:0]] = 1'b1;
              case (memel[SIG_IDS_W-1:0])
               'd`_si , 'd`I_SCAN_IN: begin LOAD[0] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`_so , 'd`O_SCAN_OUT: begin UNLOAD[0] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               default: begin  
                 $display("\nXTB Error: Wrong signal argument (%s) passed to load_unload procedure. Exiting...", SignalIDName[memel[SIG_IDS_W-1:0]]);
                 $finish; 
               end 
             endcase 
             na = na+1;
           end
           load_unload(sid_args, sval_args);
         end 
         'd`multiclock_captureStmt: begin: multiclock_capture_BLOCK
           cur_stmt = `multiclock_captureStmt;
           set_args(memel[8:4]);
           multiclock_capture(sid_args, sval_args);
         end 
         'd`allclock_launchStmt: begin: allclock_launch_BLOCK
           cur_stmt = `allclock_launchStmt;
           set_args(memel[8:4]);
           allclock_launch(sid_args, sval_args);
         end 
         'd`allclock_captureStmt: begin: allclock_capture_BLOCK
           cur_stmt = `allclock_captureStmt;
           set_args(memel[8:4]);
           allclock_capture(sid_args, sval_args);
         end 
         default: begin $display("\nXTB Error: Unrecognized code %0h, @ inst %0d", opcode, data_i); $finish; end 
       endcase 
       data_i = data_i + 1;
       popcode = opcode;
       if (verbose >= 3) display_stmt(cur_stmt);
     end 
     $display("XTB: Simulation of %0d pattern%s completed with %0d error%s (time: %0t, cycles: %0d)\n", nbpats+end_pat-1, nbpats>1?"s":"", nbfails, nbfails>1?"s":"", $time, v_count); 

     if (diagf) $fclose(diagf);
     ->end_part;
   end 


   initial begin: _burst__pattern__init_unit

     $sdf_annotate("../sdf/Digital_Timer.sdf",dut,,,"TYPICAL","1.0:1.0:1.0", "FROM_MTM");


     for (n=0; n<SIG_IDS; n=n+1) SignalIDWidth[n] = 0;
     SignalIDName[0] = "clk";
     SignalIDType[0] = 0; //clk
     SignalIDWidth[0] = 1; //clk
     SignalIDName[1] = "rst";
     SignalIDType[1] = 0; //rst
     SignalIDWidth[1] = 1; //rst
     SignalIDName[2] = "\ini_Time[3] ";
     SignalIDType[2] = 0; //\ini_Time[3] 
     SignalIDWidth[2] = 1; //\ini_Time[3] 
     SignalIDName[3] = "\ini_Time[2] ";
     SignalIDType[3] = 0; //\ini_Time[2] 
     SignalIDWidth[3] = 1; //\ini_Time[2] 
     SignalIDName[4] = "\ini_Time[1] ";
     SignalIDType[4] = 0; //\ini_Time[1] 
     SignalIDWidth[4] = 1; //\ini_Time[1] 
     SignalIDName[5] = "\ini_Time[0] ";
     SignalIDType[5] = 0; //\ini_Time[0] 
     SignalIDWidth[5] = 1; //\ini_Time[0] 
     SignalIDName[6] = "up_in";
     SignalIDType[6] = 0; //up_in
     SignalIDWidth[6] = 1; //up_in
     SignalIDName[7] = "down_in";
     SignalIDType[7] = 0; //down_in
     SignalIDWidth[7] = 1; //down_in
     SignalIDName[8] = "I_SCAN_MODE";
     SignalIDType[8] = 0; //I_SCAN_MODE
     SignalIDWidth[8] = 1; //I_SCAN_MODE
     SignalIDName[9] = "I_SCAN_RST";
     SignalIDType[9] = 0; //I_SCAN_RST
     SignalIDWidth[9] = 1; //I_SCAN_RST
     SignalIDName[10] = "I_SCAN_IN";
     SignalIDType[10] = 0; //I_SCAN_IN
     SignalIDWidth[10] = 1; //I_SCAN_IN
     SignalIDName[11] = "I_SE";
     SignalIDType[11] = 0; //I_SE
     SignalIDWidth[11] = 1; //I_SE
     SignalIDName[12] = "\Time[3] ";
     SignalIDType[12] = 1; //\Time[3] 
     SignalIDWidth[12] = 1; //\Time[3] 
     SignalIDName[13] = "\Time[2] ";
     SignalIDType[13] = 1; //\Time[2] 
     SignalIDWidth[13] = 1; //\Time[2] 
     SignalIDName[14] = "\Time[1] ";
     SignalIDType[14] = 1; //\Time[1] 
     SignalIDWidth[14] = 1; //\Time[1] 
     SignalIDName[15] = "\Time[0] ";
     SignalIDType[15] = 1; //\Time[0] 
     SignalIDWidth[15] = 1; //\Time[0] 
     SignalIDName[16] = "alarm";
     SignalIDType[16] = 1; //alarm
     SignalIDWidth[16] = 1; //alarm
     SignalIDName[17] = "O_SCAN_OUT";
     SignalIDType[17] = 1; //O_SCAN_OUT
     SignalIDWidth[17] = 1; //O_SCAN_OUT
     SignalIDName[18] = "_pi";
     SignalIDType[18] = 3; //_pi
     SignalIDWidth[18] = 12; //_pi
     SignalIDName[19] = "all_inputs";
     SignalIDType[19] = 3; //all_inputs
     SignalIDWidth[19] = 12; //all_inputs
     SignalIDName[20] = "_po";
     SignalIDType[20] = 3; //_po
     SignalIDWidth[20] = 6; //_po
     SignalIDName[21] = "_si";
     SignalIDType[21] = 3; //_si
     SignalIDWidth[21] = 1; //_si
     SignalIDName[22] = "all_outputs";
     SignalIDType[22] = 3; //all_outputs
     SignalIDWidth[22] = 6; //all_outputs
     SignalIDName[23] = "_clk";
     SignalIDType[23] = 3; //_clk
     SignalIDWidth[23] = 2; //_clk
     SignalIDName[24] = "_so";
     SignalIDType[24] = 3; //_so
     SignalIDWidth[24] = 1; //_so
     WFTIDName[0] = "_multiclock_capture_WFT_";
     WFTIDName[1] = "_default_WFT_";
     WFTIDName[2] = "_allclock_launch_WFT_";
     WFTIDName[3] = "_allclock_capture_WFT_";
     StmtNames[0] = "EndPat";
     StmtNames[1] = "IncPat";
     StmtNames[2] = "SetPat";
     StmtNames[3] = "WFTStmt";
     StmtNames[4] = "ConditionStmt";
     StmtNames[5] = "VectorStmt";
     StmtNames[6] = "FixedStmt";
     StmtNames[7] = "test_setupStmt";
     StmtNames[8] = "load_unloadStmt";
     StmtNames[9] = "multiclock_captureStmt";
     StmtNames[10] = "allclock_launchStmt";
     StmtNames[11] = "allclock_captureStmt";

     $display("%s",`MAXTB_H_S);
     $display("%s",`MAXTB_HEADER);
     $display("%s\n",`MAXTB_H_S);

     $timeformat(-9,2," ns",19);

     `ifdef tmax_test_data_file 
       `undef TDATA_FILE
       `define TDATA_FILE `tmax_test_data_file
        $display("XTB: test data file set to \"%s\"", `TDATA_FILE);
     `endif


     `ifdef tmax_vcde
       $display("XTB: Dumping Extended VCD information in file \"./tb/tb.vcd\"");
       $dumpports( dut, "./tb/tb.vcd");
     `endif

     `ifdef tmax_msg
       verbose = `tmax_msg ;
     `else
       verbose = 0 ;
     `endif

     `ifdef tmax_rpt
     rep_pat = `tmax_rpt ;
     `else
     rep_pat = 5 ;
     `endif

     CH_NAMES[0] = "1";
     CH_PINS[0] = "O_SCAN_OUT";
     CH_OUTINV[0] = 11'b00101011111;
     CH_INPINV[0] = 11'b11010100000;
     CT_OUTINV[0] = 11'b00111110000;

     diagm = 0;
     diag_file = "";

     `ifdef tmax_diag 
       diagm = `tmax_diag;
     `endif

     -> start_part;
     @(end_part) #0;
     $finish(0);

   end

 endmodule
